name: Build and push images

on:
  workflow_dispatch:
    inputs:
      dockerhubImageName:
        description: 'dockerhub image name'
        required: true
        default: 'dtyq/php-dockerfile'
      ghcrImageName:
        description: 'ghcr.io image name'
        required: true
        default: 'ghcr.io/dtyq/php-dockerfile'
      awsEcrImageName:
        description: 'AWS ECR image name'
        required: true
        default: 'public.ecr.aws/dtyq/php-dockerfile'
  schedule:
    # every Wednesday at 3:42 AM(UTC, Beijing time: 11:42 AM)
    - cron:  '42 3 * * 3'

env:
  TRY_MIRRORS: ""
  PUBLIC_MIRROR: "https://dl-cdn.alpinelinux.org" # no mirror needed at github actions

jobs:
  prepare:
    name: Prepare matrix
    runs-on: ubuntu-latest
    outputs:
      tasks: ${{ steps.gentasks.outputs.tasks }}
      images: ${{ steps.gentasks.outputs.images }}
    steps:
      - name: Generate tasks
        shell: python3 {0}
        id: gentasks
        run: |
          import os, json

          phpAlpineVersions = {
            "8.3": "3.21",
            "8.2": "3.21",
            "8.1": "3.18",
            "8.0": "3.16",
            "7.4": "3.15",
          }

          extVersions = [
            # swoole 5.1 branch
            "swoole-5.1.5",
            # swoole 4.8 branch
            "swoole-4.8.13",
            # swow
            "swow-1.5.3",
          ]

          extraExts = [
            "jsonpath",
            "parle",
            "xlswriter",
          ]
          extraExtTag = "-".join(sorted(extraExts))

          githubOutput = open(os.environ["GITHUB_OUTPUT"], "w")

          tags = []
          for phpVer, alpineVer in phpAlpineVersions.items():
            for ext in extVersions:
              if ext.startswith("swoole-5") and phpVer == "7.4":
                # swoole 5 不支持 PHP 7.4
                continue
              if ext.startswith("swoole-4") and phpVer == "8.3":
                # swoole 4 不支持 PHP 8.3
                continue
              if ext.startswith("swow") and phpVer == "7.4":
                # swow 不支持 PHP 7.4
                continue
              tags.append(f"{phpVer}-alpine-{alpineVer}-{ext}-{extraExtTag}")

          serialized = json.dumps({
            "tag": tags,
          })

          githubOutput.write(f"tasks={serialized}\n")

          images = []
          images.append(f"${{ inputs.ghcrImageName }}")
          if "${{ secrets.DOCKERHUB_CRED }}":
            images.append(f"${{ inputs.dockerhubImageName }}")
          if "${{ secrets.AWS_ECR_CRED }}":
            images.append(f"${{ inputs.awsEcrImageName }}")

          serialized = json.dumps(images)

          githubOutput.write(f"images={serialized}\n")
          githubOutput.close()

  build:
    name: Build and push ${{ matrix.tag }}
    runs-on: ubuntu-latest
    needs: prepare
    strategy:
      matrix: ${{ fromJson(needs.prepare.outputs.tasks) }}
      max-parallel: 5
    permissions:
      contents: write
      packages: write
      id-token: write
      attestations: write
    steps:
      # checkout source code
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up secrets
        shell: python3 {0}
        run: |
          import os, json, base64

          fw = open(os.path.expanduser("~/.docker/config.json"), "w")

          config = {
            "auths": {},
          }

          # GHCR
          cred = base64.b64encode(b'whatever:${{ github.token }}').decode()
          config["auths"]["ghcr.io"] = {
            "auth": cred,
          }

          # AWS ECR
          cred = "${{ secrets.AWS_ECR_CRED }}"
          if cred:
            config["auths"]["public.ecr.aws"] = {
              "auth": cred,
            }

          # DockerHub
          cred = "${{ secrets.DOCKERHUB_CRED }}"
          if cred:
            config["auths"]["https://index.docker.io/v1/"] = {
              "auth": cred,
            }

          fw.write(json.dumps(config))
          fw.close()

      - name: Build image
        shell: bash
        id: build
        run: |
          IMAGE_NAME=php-dockerfile ./build.py "${{ matrix.tag }}"

      - name: Push image
        shell: bash
        id: push
        run: |
          echo '${{ needs.prepare.outputs.images }}' | jq -r '.[]' | while read image; do
            docker tag php-dockerfile:${{ matrix.tag }} "$image:${{ matrix.tag }}"
            docker tag php-dockerfile:${{ matrix.tag }}-debuggable "$image:${{ matrix.tag }}-debuggable"
            docker push "$image:${{ matrix.tag }}"
            docker push "$image:${{ matrix.tag }}-debuggable"

            digest=$(
              docker image inspect "$image:${{ matrix.tag }}" --format '{{index .RepoDigests 0}}' |
              awk '-F@' '{print $2}'
            )
          done
          echo "digest=${digest}" >> $GITHUB_OUTPUT

      - name: Generate artifact attestation
        if: always() && steps.push.outputs.digest != ''
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ matrix.image }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: ${{ matrix.image }}
